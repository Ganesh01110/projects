version: '3.8'

services:
  user-service:
    build:
      context: ./user-service
    ports:
      - "3001:3001"
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - SERVICE_PORT=3001
    networks:
      - backend

  billing-service:
    build:
      context: ./billing-service
    ports:
      - "3002:3002"
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - SERVICE_PORT=3002
    networks:
      - backend

  appointment-service:
    build:
      context: ./appointment-service
    ports:
      - "3003:3003"
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - SERVICE_PORT=3003
    networks:
      - backend

  gateway:
    build:
      context: ./gateway
    ports:
      - "3000:3000"
    depends_on:
      user-service:
        condition: service_started
      billing-service:
        condition: service_started
      appointment-service:
        condition: service_started
    environment:
      - NODE_ENV=production
    networks:
      - backend

  mysql:
    image: mysql:latest
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ""
      MYSQL_USER: root
      MYSQL_PASSWORD: ""
      MYSQL_DATABASE: PrismaHospitalManagementSystem1
    ports:
      - "3306:3306"
    networks:
      - backend
    volumes:
      - mysql_data:/var/lib/mysql
    command: >
      bash -c "
      docker-entrypoint.sh mysqld &
      sleep 10 &&
      mysql -uroot -e 'CREATE DATABASE IF NOT EXISTS PrismaHospitalManagementSystem;' &&
      mysql -uroot -e 'CREATE DATABASE IF NOT EXISTS PrismaHospitalManagementSystem2;' &&
      wait
      "  
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      retries: 5

  redis:
    image: "redis:latest"
    restart: always
    ports:
      - "6379:6379"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      retries: 3

  rabbitmq:
    image: "rabbitmq:3-management"
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672" # Management UI
    networks:
      - backend
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      retries: 5

networks:
  backend:
    driver: bridge

volumes:
  mysql_data:
    driver: local  
