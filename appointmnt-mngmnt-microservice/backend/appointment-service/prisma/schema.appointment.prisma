generator client {
  provider      = "prisma-client-js"
  output        = "./generated/appointment-client"
  //binaryTargets = ["native", "linux-musl", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("APPOINTMENT_DATABASE_URL")
}

model appointment {
  id     String   @id @default(uuid())
  userId String
  date   DateTime
  status String
}

model user {
  id          Int    @id @default(autoincrement())
  name        String @db.VarChar(255)
  email       String @unique(map: "email") @db.VarChar(255)
  age         Int?
  case        String
  joiner_name String
}

model user_details {
  id           Int    @id @default(autoincrement())
  namdocument1 String
  namdocument2 String
  namdocument3 String
}

model doctorpatienthistory {
  visit_history_id     Int                             @id @default(autoincrement())
  patientId            Int
  doctorId             String
  visit_datetime       DateTime
  department           doctorpatienthistory_department @default(OPD)
  medicines_prescribed String?
  remarks              String?
  suggestions          String?
  doctor_fee           Decimal                         @db.Decimal(10, 2)

  @@index([patientId], map: "DoctorPatientHistory_patientId_fkey")
}

model doctorvisit {
  visit_id             Int                     @id @default(autoincrement())
  mapping_id           Int
  department           doctorvisit_department?
  visit_datetime       DateTime                @default(now())
  medicines_prescribed String?
  remarks              String?
  suggestions          String?

  @@index([mapping_id], map: "DoctorVisit_mapping_id_fkey")
}

model medicine {
  medicine_id     Int       @id @default(autoincrement())
  medicine_name   String
  hsn             String?
  batch_no        String?
  serial_no       String?
  company_name    String?
  expiry_date     DateTime?
  pieces_per_unit Int?
  mrp             Decimal?
  purchase_price  Decimal?
}

model patient {
  patientId                      Int                                    @id @default(autoincrement())
  RegistrationNo                 String                                 @unique(map: "Patient_RegistrationNo_key")
  admission_date                 DateTime?
  department                     String?
  id_no                          String?
  admission_time                 DateTime?
  admission_type                 patient_admission_type                 @default(OPD)
  PatientName                    String
  Gender                         String
  Age                            Int?
  religion                       String?
  GuardianName                   String?
  phoneNo                        String?
  JoinerName                     String?
  JoinerphoneNo                  String?
  RelationShip                   String?
  Address                        String?
  City                           String?
  state                          String?
  district                       String?
  PostalCode                     String?
  attending_doctor               String?
  CabinNo                        String?
  Status                         patient_Status?
  registration_date              DateTime                               @default(now())
  Problems                       String?
  Remarks                        String?
  Notification_visibility        patient_Notification_visibility        @default(NotViewed)
  Lab_Notification_visibility    patient_Lab_Notification_visibility    @default(NotViewed)
  Pharma_Notification_visibility patient_Pharma_Notification_visibility @default(NotViewed)
  discharge_date                 DateTime?
}

model patientadmission {
  id                Int                                @id @default(autoincrement())
  patientId         Int
  admission_type    patientadmission_admission_type
  current_dept_type patientadmission_current_dept_type
  admission_date    DateTime
  discharge_date    DateTime?
  current_status    patientadmission_current_status

  @@index([patientId], map: "PatientAdmission_patientId_fkey")
}

model patientdepartmenthistory {
  history_id          Int                                           @id @default(autoincrement())
  patientId           Int
  previous_department patientdepartmenthistory_previous_department?
  current_department  patientdepartmenthistory_current_department?
  transition_date     DateTime                                      @default(now())
  remarks             String?

  @@index([patientId], map: "PatientDepartmentHistory_patientId_fkey")
}

model patientdoctormapping {
  mapping_id        Int                              @id @default(autoincrement())
  patientId         Int
  doctor_id         String
  department        patientdoctormapping_department?
  role              patientdoctormapping_role
  role_name         String?
  consultation_date DateTime                         @default(now())
  created_at        DateTime                         @default(now())
  updated_at        DateTime
  status            patientdoctormapping_status      @default(ACTIVE)

  @@index([patientId], map: "PatientDoctorMapping_patientId_fkey")
}

enum doctorvisit_department {
  OPD
  IPD
  OT
  EMERGENCY
  DISCHARGED
}

enum patientadmission_admission_type {
  OPD
  IPD
  OT
  EMERGENCY
  DISCHARGED
}

enum patientdepartmenthistory_previous_department {
  OPD
  IPD
  OT
  EMERGENCY
  DISCHARGED
}

enum patientadmission_current_dept_type {
  OPD
  IPD
  OT
  EMERGENCY
  DISCHARGED
}

enum patientdepartmenthistory_current_department {
  OPD
  IPD
  OT
  EMERGENCY
  DISCHARGED
}

enum patientdoctormapping_department {
  OPD
  IPD
  OT
  EMERGENCY
  DISCHARGED
}

enum doctorpatienthistory_department {
  OPD
  IPD
  OT
  EMERGENCY
  DISCHARGED
}

enum patientdoctormapping_role {
  Consulting
  Attending
  Referral
  Other
}

enum patient_admission_type {
  OPD
  IPD
  OT
  EMERGENCY
  DISCHARGED
}

enum patientadmission_current_status {
  ACTIVE
  DISCHARGED
}

enum patientdoctormapping_status {
  ACTIVE
  DISCHARGED
}

enum patient_Status {
  OPD
  IPD
  OT
  EMERGENCY
  DISCHARGED
}

enum patient_Notification_visibility {
  NotViewed
  Viewed
}

enum patient_Lab_Notification_visibility {
  NotViewed
  Viewed
}

enum patient_Pharma_Notification_visibility {
  NotViewed
  Viewed
}
