generator client {
  provider = "prisma-client-js"
  output   = "../../generated/user-client"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_USER_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  phone     String?
  avatar    String?
  createdAt DateTime @default(now())

  // Relations
 rides Ride[] @relation(name: "UserRides")
 friends Friend[] @relation("UserFriends")
 friendOf Friend[] @relation("FriendOf")
 // rides Ride[] @relation(name: "UserRides", references: [userId])
  // notifications Notification[]
  // payment       Transaction[]
}

model Ride {
  id        String     @id @default(uuid())
  userId    String
  driverId  String?
  status    RideStatus @default(PENDING)
  pickup    String
  dropoff   String
  fare      Float
  createdAt DateTime   @default(now())

  //user User @relation(fields: [userId], references: [id], onDelete: Cascade) // Use shared User model
  // Relations
  user User @relation(name: "UserRides", fields: [userId], references: [id], onDelete: Cascade)
}

model Friend {
  id        String   @id @default(uuid())
  userId    String
  friendId  String
  status    FriendStatus @default(PENDING)
  createdAt DateTime @default(now())

  // Relations
  user      User @relation(name: "UserFriends",fields: [userId], references: [id], onDelete: Cascade)
  friend    User @relation(name: "FriendOf",fields: [friendId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId]) // Ensure unique friendships
}

enum RideStatus {
  PENDING
  ONGOING
  COMPLETED
  CANCELED
}

enum FriendStatus {
  PENDING
  ACCEPTED
  BLOCKED
}
