# Microservices Project Setup Guide

## 1. **Project Initialization**
### **1.1 Folder Structure**
```
ride-shareNtrack-microservice/
├── backend/
│   ├── services/
│   │   ├── auth-service/
│   │   ├── user-service/
│   │   ├── ride-service/
│   │   ├── payment-service/
│   │   └── notification-service/
│   ├── shared/
│   └── package.json
├── frontend/
└── turbo.json
```

### **1.2 Initialize TurboRepo**
```sh
npx create-turbo@latest
```
> This command initializes TurboRepo, a monorepo tool for managing multiple services efficiently.

### **1.3 Install Turbo in the Monorepo**
```sh
npm install turbo --save-dev
```

### **1.4 Configure `turbo.json`**
Create a `turbo.json` file at the root:
```json
{
  "pipeline": {
    "build": {},
    "dev": {
      "dependsOn": ["^dev"],
      "parallel": true
    }
  }
}
```

### **1.5 Setup Each Microservice**
Inside `backend/services`, initialize each microservice:
```sh
cd backend/services/auth-service
npm init -y
```
Repeat for `user-service`, `ride-service`, etc.

### **1.6 Install Dependencies for Each Service**
For a TypeScript-based Node.js microservice:
```sh
npm install express dotenv cors helmet pino
npm install --save-dev typescript ts-node nodemon @types/express @types/node
```

### **1.7 Setup TypeScript (`tsconfig.json`)**
```json
{
  "compilerOptions": {
    "outDir": "dist",
    "rootDir": "src",
    "module": "CommonJS",
    "target": "ES6",
    "strict": true
  }
}
```

### **1.8 Configure Nodemon (`nodemon.json`)**
```json
{
  "watch": ["src"],
  "ext": "ts",
  "exec": "ts-node src/index.ts"
}
```

### **1.9 Add Scripts to `package.json`**
```json
"scripts": {
  "dev": "nodemon",
  "build": "tsc"
}
```

## 2. **Running the Project**
### **2.1 Start Services with Turbo**
```sh
npm run dev
```

### **2.2 Start an Individual Service**
```sh
cd backend/services/auth-service
npm run dev
```

## 3. **Common Issues and Fixes**
### **3.1 Fixing 'MODULE_NOT_FOUND'**
```sh
npx tsc # Compile TypeScript
npx ts-node src/index.ts # Run TypeScript without compiling
```

### **3.2 Fixing 'rootDir' Issue in TypeScript**
Ensure `tsconfig.json` has:
```json
"rootDir": "./src"
```

## 4. **Adding More Microservices**
Repeat the steps for any new service by creating a new folder inside `backend/services/` and setting up `package.json`, `tsconfig.json`, and `nodemon.json`.

---

This document serves as a reference for setting up and running the microservices efficiently. 🚀





----------------------------------
docker image setup for redis, kafka-zookeeper

----
Corrected Commands for Windows CMD
1️⃣ Start Zookeeper

docker run -d --name zookeeper ^
  -p 2181:2181 ^
  -e ALLOW_ANONYMOUS_LOGIN=yes ^
  bitnami/zookeeper:latest


2️⃣ Start Kafka

docker run -d --name kafka ^
  -p 9092:9092 ^
  -e KAFKA_BROKER_ID=1 ^
  -e KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181 ^
  -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092 ^
  -e KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1 ^
  --network="host" ^
  bitnami/kafka:latest


  if not work then remove both and folow below Commands

  docker network create kafka-network && ^
docker run -d --name zookeeper ^
  --network=kafka-network ^
  -p 2181:2181 ^
  -e ALLOW_ANONYMOUS_LOGIN=yes ^
  bitnami/zookeeper:latest && ^
docker run -d --name kafka ^
  --network=kafka-network ^
  -p 9092:9092 ^
  -e KAFKA_BROKER_ID=1 ^
  -e KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181 ^
  -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092 ^
  -e KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1 ^
  bitnami/kafka:latest



3️⃣ Start Redis

docker run -d --name redis -p 6379:6379 redis:latest
To Check Running Containers

docker ps

To Open Redis CLI

docker exec -it redis redis-cli

To List Kafka Topics

docker exec -it kafka kafka-topics.sh --bootstrap-server localhost:9092 --list


4 start postgres/postgis

docker pull postgis/postgis


docker run -d --name postgres-postgis ^
  -e POSTGRES_USER=admin ^
  -e POSTGRES_PASSWORD=adminpassword ^
  -e POSTGRES_DB=ridesharing ^
  -p 5432:5432 ^
  postgis/postgis


---------------------
Commands to Run Kafka, Zookeeper, and Redis (Without Re-downloading Images)
1️⃣ Start Zookeeper (If not running already)

docker start zookeeper || docker run -d --name zookeeper ^
  -p 2181:2181 ^
  -e ALLOW_ANONYMOUS_LOGIN=yes ^
  bitnami/zookeeper:latest

2️⃣ Start Kafka

docker start kafka || docker run -d --name kafka ^
  -p 9092:9092 ^
  -e KAFKA_BROKER_ID=1 ^
  -e KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181 ^
  -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092 ^
  -e KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1 ^
  --network="host" ^
  bitnami/kafka:latest

3️⃣ Start Redis

docker start redis || docker run -d --name redis -p 6379:6379 redis:latest

Checking Status & Interacting
✅ Check Running Containers

docker ps
✅ Connect to Kafka Container & List Topics

docker exec -it kafka kafka-topics.sh --bootstrap-server localhost:9092 --list
✅ Access Redis CLI

docker exec -it redis redis-cli

---------------------------
Role of .turbo Folder
The .turbo folder is created when using TurboRepo and contains two important subdirectories:

cookie Folder

Stores metadata about Turbo's execution, including task hashes.
Helps determine if a task needs to be re-run or if it can use cached results.
Not necessary to commit since it gets regenerated.
daemon Folder

Holds information about Turbo’s background process (daemon) to speed up task execution.
Turbo's daemon keeps track of task dependencies and runs incremental builds.
Should not be committed because it's specific to local execution.


--------------------------------

Final Answer for Your Project
Your structure is Monorepo + Microservices ✅

You are keeping all microservices in one Git repo (monorepo ✅).
Each microservice is independent and deployable separately (microservices ✅).
Prisma is centralized, but each service only accesses relevant models.
Deployment is still microservices-based, even though the code is stored in one place.





-----------------------------------


-----------------------------

npm install @prisma/client prisma

 Step 1: Create Required Directories

mkdir infra\prisma\schemas
📌 Step 2: Create Individual Schema Files

echo. > infra\prisma\schemas\schema.auth.prisma
echo. > infra\prisma\schemas\schema.user.prisma
echo. > infra\prisma\schemas\schema.ride.prisma
echo. > infra\prisma\schemas\schema.location.prisma
echo. > infra\prisma\schemas\schema.notification.prisma
🔹 This will work because now the infra/prisma/schemas directory exists.



-----------------------------------------------

To compile the .proto file using the protoc compiler with the appropriate plugins for TypeScript and gRPC, follow these steps:

1. Install Required Dependencies
Make sure you have the necessary dependencies installed in your project. Run the following commands in your terminal:

npm install --save-dev grpc-tools @grpc/proto-loader ts-proto
npm install --save-dev protoc-gen-ts protoc-gen-grpc

2. Install protoc Compiler
If you don't already have the protoc compiler installed, download it from the Protocol Buffers GitHub releases page. Choose the version for your operating system, extract it, and add the protoc binary to your system's PATH.

3. Prepare the .proto File
Ensure your .proto file (e.g., location.proto) is saved in the appropriate directory (e.g., src/proto).

4. Run the protoc Command
Run the following command in your terminal to generate the TypeScript and gRPC files:

npx protoc \
  --plugin=protoc-gen-ts=./node_modules/.bin/protoc-gen-ts \
  --js_out=import_style=commonjs,binary:./src/proto \
  --ts_out=./src/proto \
  --grpc_out=./src/proto \
  ./src/proto/location.proto


5. Explanation of the Command
npx protoc: Runs the protoc compiler.
--plugin=protoc-gen-ts=./node_modules/.bin/protoc-gen-ts: Specifies the TypeScript plugin for protoc.
--js_out=import_style=commonjs,binary:./src/proto: Generates JavaScript files in CommonJS format.
--ts_out=./src/proto: Generates TypeScript definitions for the .proto file.
--grpc_out=./src/proto: Generates gRPC service stubs.
./src/proto/location.proto: Specifies the path to the .proto file.


6. Verify the Generated Files
After running the command, you should see the following files in the src/proto directory:

location_pb.js: JavaScript file for the .proto definitions.
location_pb.d.ts: TypeScript definitions for the .proto file.
location_grpc_pb.js: JavaScript file for the gRPC service stubs.
location_grpc_pb.d.ts: TypeScript definitions for the gRPC service stubs.

7. Update Imports in Your Code
Ensure your location.grpc.ts file imports the generated files correctly:

import { LocationService } from "./proto/location_grpc_pb";
import { FindNearestDriversRequest, FindNearestDriversResponse } from "./proto/location_pb";

8. Run Your gRPC Server
After generating the files, you can run your gRPC server as usual:

node dist/location.grpc.js
