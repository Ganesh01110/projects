version: '3.8'

networks:
  ride-network:
    driver: bridge

services:
  # PostgreSQL Databases per Service
  postgres-auth:
    image: postgis/postgis
    container_name: postgres-auth
    restart: always
    networks:
      - ride-network
    env_file:
      - .env
    environment:
      POSTGRES_USER: auth_user
      POSTGRES_PASSWORD: auth_password
      POSTGRES_DB: auth_db
    ports:
      - "5433:5432"

  postgres-user:
    image: postgis/postgis
    container_name: postgres-user
    restart: always
    networks:
      - ride-network
    env_file:
      - .env
    environment:
      POSTGRES_USER: user_user
      POSTGRES_PASSWORD: user_password
      POSTGRES_DB: user_db
    ports:
      - "5434:5432"

  postgres-ride:
    image: postgis/postgis
    container_name: postgres-ride
    restart: always
    networks:
      - ride-network
    env_file:
      - .env
    environment:
      POSTGRES_USER: ride_user
      POSTGRES_PASSWORD: ride_password
      POSTGRES_DB: ride_db
    ports:
      - "5435:5432"

  postgres-location:
    image: postgis/postgis
    container_name: postgres-location
    restart: always
    networks:
      - ride-network
    env_file:
      - .env
    environment:
      POSTGRES_USER: location_user
      POSTGRES_PASSWORD: location_password
      POSTGRES_DB: location_db
    ports:
      - "5436:5432"

  postgres-notification:
    image: postgis/postgis
    container_name: postgres-notification
    restart: always
    networks:
      - ride-network
    env_file:
      - .env
    environment:
      POSTGRES_USER: notification_user
      POSTGRES_PASSWORD: notification_password
      POSTGRES_DB: notification_db
    ports:
      - "5437:5432"

  # Redis
  redis:
    image: redis:latest
    container_name: redis
    restart: always
    networks:
      - ride-network
    env_file:
      - .env
    ports:
      - "6379:6379"

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    restart: always
    networks:
      - ride-network
    env_file:
      - .env
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"

  # Auth Service
  auth-service:
    build: ./services/auth-service
    container_name: auth-service
    restart: always
    depends_on:
      postgres-auth:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ride-network
    env_file:
      - .env
    environment:
      DATABASE_URL: ${POSTGRES_AUTH_URL}
      REDIS_HOST: ${REDIS_HOST}
    ports:
      - "5001:5001"

  # User Service
  user-service:
    build: ./services/user-service
    container_name: user-service
    restart: always
    depends_on:
      postgres-user:
        condition: service_healthy
    networks:
      - ride-network
    env_file:
      - .env
    environment:
      DATABASE_URL: ${POSTGRES_USER_URL}
    ports:
      - "5002:5002"

  # Ride Service
  ride-service:
    build: ./services/ride-service
    container_name: ride-service
    restart: always
    depends_on:
      postgres-ride:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - ride-network
    env_file:
      - .env
    environment:
      DATABASE_URL: ${POSTGRES_RIDE_URL}
      KAFKA_BROKER: ${KAFKA_BROKER}
    ports:
      - "5003:5003"

  # Location Service (PostGIS)
  location-service:
    build: ./services/location-service
    container_name: location-service
    restart: always
    depends_on:
      postgres-location:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ride-network
    env_file:
      - .env
    environment:
      DATABASE_URL: ${POSTGRES_LOCATION_URL}
      REDIS_HOST: ${REDIS_HOST}
    ports:
      - "5004:5004"

  # Notification Service
  notification-service:
    build: ./services/notification-service
    container_name: notification-service
    restart: always
    depends_on:
      postgres-notification:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - ride-network
    env_file:
      - .env
    environment:
      DATABASE_URL: ${POSTGRES_NOTIFICATION_URL}
      KAFKA_BROKER: ${KAFKA_BROKER}
    ports:
      - "5005:5005"

volumes:
  postgres_auth_data:
  postgres_user_data:
  postgres_ride_data:
  postgres_location_data:
  postgres_notification_data:
  redis_data:
